/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.khalibre.student.model.impl;

import com.khalibre.student.model.StudentEntry;
import com.khalibre.student.model.StudentEntryModel;
import com.khalibre.student.model.StudentEntrySoap;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the StudentEntry service. Represents a row in the &quot;STUDENT_StudentEntry&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>StudentEntryModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link StudentEntryImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see StudentEntryImpl
 * @generated
 */
@JSON(strict = true)
public class StudentEntryModelImpl
	extends BaseModelImpl<StudentEntry> implements StudentEntryModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a student entry model instance should use the <code>StudentEntry</code> interface instead.
	 */
	public static final String TABLE_NAME = "STUDENT_StudentEntry";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"studentEntryId", Types.BIGINT},
		{"studentEntryName", Types.VARCHAR},
		{"studentEntryGender", Types.VARCHAR},
		{"studentEntryAge", Types.INTEGER}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("studentEntryId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("studentEntryName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("studentEntryGender", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("studentEntryAge", Types.INTEGER);
	}

	public static final String TABLE_SQL_CREATE =
		"create table STUDENT_StudentEntry (uuid_ VARCHAR(75) null,studentEntryId LONG not null primary key,studentEntryName VARCHAR(75) null,studentEntryGender VARCHAR(75) null,studentEntryAge INTEGER)";

	public static final String TABLE_SQL_DROP =
		"drop table STUDENT_StudentEntry";

	public static final String ORDER_BY_JPQL =
		" ORDER BY studentEntry.studentEntryId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY STUDENT_StudentEntry.studentEntryId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final long STUDENTENTRYID_COLUMN_BITMASK = 1L;

	public static final long UUID_COLUMN_BITMASK = 2L;

	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
		_entityCacheEnabled = entityCacheEnabled;
	}

	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
		_finderCacheEnabled = finderCacheEnabled;
	}

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static StudentEntry toModel(StudentEntrySoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		StudentEntry model = new StudentEntryImpl();

		model.setUuid(soapModel.getUuid());
		model.setStudentEntryId(soapModel.getStudentEntryId());
		model.setStudentEntryName(soapModel.getStudentEntryName());
		model.setStudentEntryGender(soapModel.getStudentEntryGender());
		model.setStudentEntryAge(soapModel.getStudentEntryAge());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<StudentEntry> toModels(StudentEntrySoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<StudentEntry> models = new ArrayList<StudentEntry>(
			soapModels.length);

		for (StudentEntrySoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public StudentEntryModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _studentEntryId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setStudentEntryId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _studentEntryId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return StudentEntry.class;
	}

	@Override
	public String getModelClassName() {
		return StudentEntry.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<StudentEntry, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<StudentEntry, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<StudentEntry, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((StudentEntry)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<StudentEntry, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<StudentEntry, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(StudentEntry)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<StudentEntry, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<StudentEntry, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, StudentEntry>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			StudentEntry.class.getClassLoader(), StudentEntry.class,
			ModelWrapper.class);

		try {
			Constructor<StudentEntry> constructor =
				(Constructor<StudentEntry>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException
							reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		}
		catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map<String, Function<StudentEntry, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<StudentEntry, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<StudentEntry, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<StudentEntry, Object>>();
		Map<String, BiConsumer<StudentEntry, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<StudentEntry, ?>>();

		attributeGetterFunctions.put("uuid", StudentEntry::getUuid);
		attributeSetterBiConsumers.put(
			"uuid", (BiConsumer<StudentEntry, String>)StudentEntry::setUuid);
		attributeGetterFunctions.put(
			"studentEntryId", StudentEntry::getStudentEntryId);
		attributeSetterBiConsumers.put(
			"studentEntryId",
			(BiConsumer<StudentEntry, Long>)StudentEntry::setStudentEntryId);
		attributeGetterFunctions.put(
			"studentEntryName", StudentEntry::getStudentEntryName);
		attributeSetterBiConsumers.put(
			"studentEntryName",
			(BiConsumer<StudentEntry, String>)
				StudentEntry::setStudentEntryName);
		attributeGetterFunctions.put(
			"studentEntryGender", StudentEntry::getStudentEntryGender);
		attributeSetterBiConsumers.put(
			"studentEntryGender",
			(BiConsumer<StudentEntry, String>)
				StudentEntry::setStudentEntryGender);
		attributeGetterFunctions.put(
			"studentEntryAge", StudentEntry::getStudentEntryAge);
		attributeSetterBiConsumers.put(
			"studentEntryAge",
			(BiConsumer<StudentEntry, Integer>)
				StudentEntry::setStudentEntryAge);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		_columnBitmask |= UUID_COLUMN_BITMASK;

		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@JSON
	@Override
	public long getStudentEntryId() {
		return _studentEntryId;
	}

	@Override
	public void setStudentEntryId(long studentEntryId) {
		_columnBitmask = -1L;

		if (!_setOriginalStudentEntryId) {
			_setOriginalStudentEntryId = true;

			_originalStudentEntryId = _studentEntryId;
		}

		_studentEntryId = studentEntryId;
	}

	public long getOriginalStudentEntryId() {
		return _originalStudentEntryId;
	}

	@JSON
	@Override
	public String getStudentEntryName() {
		if (_studentEntryName == null) {
			return "";
		}
		else {
			return _studentEntryName;
		}
	}

	@Override
	public void setStudentEntryName(String studentEntryName) {
		_studentEntryName = studentEntryName;
	}

	@JSON
	@Override
	public String getStudentEntryGender() {
		if (_studentEntryGender == null) {
			return "";
		}
		else {
			return _studentEntryGender;
		}
	}

	@Override
	public void setStudentEntryGender(String studentEntryGender) {
		_studentEntryGender = studentEntryGender;
	}

	@JSON
	@Override
	public int getStudentEntryAge() {
		return _studentEntryAge;
	}

	@Override
	public void setStudentEntryAge(int studentEntryAge) {
		_studentEntryAge = studentEntryAge;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, StudentEntry.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public StudentEntry toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, StudentEntry>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		StudentEntryImpl studentEntryImpl = new StudentEntryImpl();

		studentEntryImpl.setUuid(getUuid());
		studentEntryImpl.setStudentEntryId(getStudentEntryId());
		studentEntryImpl.setStudentEntryName(getStudentEntryName());
		studentEntryImpl.setStudentEntryGender(getStudentEntryGender());
		studentEntryImpl.setStudentEntryAge(getStudentEntryAge());

		studentEntryImpl.resetOriginalValues();

		return studentEntryImpl;
	}

	@Override
	public int compareTo(StudentEntry studentEntry) {
		int value = 0;

		if (getStudentEntryId() < studentEntry.getStudentEntryId()) {
			value = -1;
		}
		else if (getStudentEntryId() > studentEntry.getStudentEntryId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof StudentEntry)) {
			return false;
		}

		StudentEntry studentEntry = (StudentEntry)obj;

		long primaryKey = studentEntry.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return _entityCacheEnabled;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return _finderCacheEnabled;
	}

	@Override
	public void resetOriginalValues() {
		StudentEntryModelImpl studentEntryModelImpl = this;

		studentEntryModelImpl._originalUuid = studentEntryModelImpl._uuid;

		studentEntryModelImpl._originalStudentEntryId =
			studentEntryModelImpl._studentEntryId;

		studentEntryModelImpl._setOriginalStudentEntryId = false;

		studentEntryModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<StudentEntry> toCacheModel() {
		StudentEntryCacheModel studentEntryCacheModel =
			new StudentEntryCacheModel();

		studentEntryCacheModel.uuid = getUuid();

		String uuid = studentEntryCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			studentEntryCacheModel.uuid = null;
		}

		studentEntryCacheModel.studentEntryId = getStudentEntryId();

		studentEntryCacheModel.studentEntryName = getStudentEntryName();

		String studentEntryName = studentEntryCacheModel.studentEntryName;

		if ((studentEntryName != null) && (studentEntryName.length() == 0)) {
			studentEntryCacheModel.studentEntryName = null;
		}

		studentEntryCacheModel.studentEntryGender = getStudentEntryGender();

		String studentEntryGender = studentEntryCacheModel.studentEntryGender;

		if ((studentEntryGender != null) &&
			(studentEntryGender.length() == 0)) {

			studentEntryCacheModel.studentEntryGender = null;
		}

		studentEntryCacheModel.studentEntryAge = getStudentEntryAge();

		return studentEntryCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<StudentEntry, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			4 * attributeGetterFunctions.size() + 2);

		sb.append("{");

		for (Map.Entry<String, Function<StudentEntry, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<StudentEntry, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((StudentEntry)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<StudentEntry, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			5 * attributeGetterFunctions.size() + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<StudentEntry, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<StudentEntry, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((StudentEntry)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, StudentEntry>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private static boolean _entityCacheEnabled;
	private static boolean _finderCacheEnabled;

	private String _uuid;
	private String _originalUuid;
	private long _studentEntryId;
	private long _originalStudentEntryId;
	private boolean _setOriginalStudentEntryId;
	private String _studentEntryName;
	private String _studentEntryGender;
	private int _studentEntryAge;
	private long _columnBitmask;
	private StudentEntry _escapedModel;

}